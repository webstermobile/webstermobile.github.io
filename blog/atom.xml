<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IT民工的日常</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://webstermobile.github.io/blog/"/>
  <updated>2017-03-19T10:22:27.611Z</updated>
  <id>https://webstermobile.github.io/blog/</id>
  
  <author>
    <name>webster</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>再谈多列均匀布局问题</title>
    <link href="https://webstermobile.github.io/blog/multi-column-uniform-layout.html"/>
    <id>https://webstermobile.github.io/blog/multi-column-uniform-layout.html</id>
    <published>2017-03-19T08:25:00.000Z</published>
    <updated>2017-03-19T10:22:27.611Z</updated>
    
    <content type="html"><![CDATA[<p>如图所示，如何实现下列这种多列均匀布局：</p>
<p><img src="http://olrmgd9hk.bkt.clouddn.com/multi-column-equal.png" alt="image"></p>
<h4 id="法一：display-flex"><a href="#法一：display-flex" class="headerlink" title="法一：display:flex"></a>法一：display:flex</h4><p>CSS3 弹性盒子(Flexible Box 或 Flexbox)，是一种布局方式，当页面需要适应不同的屏幕大小以及设备类型时，它依然能确保元素拥有更恰当的排布行为。<br>当然 flex 布局应用于移动端不错，PC 端需要全兼容的话，兼容性不够，此处略过不谈。</p>
<h4 id="法二：借助伪元素及-text-align-justify"><a href="#法二：借助伪元素及-text-align-justify" class="headerlink" title="法二：借助伪元素及 text-align:justify"></a>法二：借助伪元素及 text-align:justify</h4><p>定义如下 HTML 样式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;container&quot;&gt;</div><div class="line">    &lt;div class=&quot;justify&quot;&gt;</div><div class="line">        &lt;i&gt;1&lt;/i&gt;</div><div class="line">        &lt;i&gt;2&lt;/i&gt;</div><div class="line">        &lt;i&gt;3&lt;/i&gt;</div><div class="line">        &lt;i&gt;4&lt;/i&gt;</div><div class="line">        &lt;i&gt;5&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>我们知道，有个 text-align:justify 可以实现两端对齐文本效果。</p>
<blockquote>
<p>text-align CSS属性定义行内内容（例如文字）如何相对它的块父元素对齐。text-align 并不控制块元素自己的对齐，只控制它的行内内容的对齐。</p>
<p>text-align:justify 表示文字向两侧对齐。<br>一开始我猜测使用它可以实现，采用如下 CSS ：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.justify&#123;</div><div class="line">  text-align: justify;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.justify i&#123;</div><div class="line">  width:24px;</div><div class="line">  line-height:24px;</div><div class="line">  display:inline-block;</div><div class="line">  text-align:center;</div><div class="line">  border-radius:50%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><img src="http://olrmgd9hk.bkt.clouddn.com/multi-column-equal-error.png" alt="image"></p>
<p>没有得到意料之中的结果，并没有实现所谓的两端对齐，查找原因，在 W3C 找到这样一段解释:</p>
<p>最后一个水平对齐属性是 justify，它会带来自己的一些问题。CSS 中没有说明如何处理连字符，因为不同的语言有不同的连字符规则。规范没有尝试去调和这样一些很可能不完备的规则，而是干脆不提这个问题。</p>
<p>额，我看完上面一大段解释还是没明白上面意思，再继续查证，才找到原因：</p>
<p>虽然 text-align:justify 属性是全兼容的，但是要使用它实现两端对齐，需要注意在模块之间添加<strong>[空格/换行符/制表符]</strong>才能起作用。</p>
<p>也就是说每一个 1 间隙，至少需要有一个空格或者换行或者制表符才行。</p>
<p>好的，我们尝试一下更新一下 HTML 结构，采用同样的 CSS：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;container&quot;&gt;</div><div class="line">    &lt;div class=&quot;justify&quot;&gt;</div><div class="line">        &lt;i&gt;1&lt;/i&gt;</div><div class="line"></div><div class="line">        &lt;i&gt;2&lt;/i&gt;</div><div class="line"></div><div class="line">        &lt;i&gt;3&lt;/i&gt;</div><div class="line"></div><div class="line">        &lt;i&gt;4&lt;/i&gt;</div><div class="line"></div><div class="line">        &lt;i&gt;5&lt;/i&gt;</div><div class="line"></div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>尝试给每一块中间添加一个换行符，结果如下：</p>
<p><img src="http://olrmgd9hk.bkt.clouddn.com/multi-column-equal-error.png" alt="image"></p>
<p>啊哦，还是不行啊。</p>
<p>再寻找原因，原来是出在最后一个元素上面，然后我找到了 text-align-last 这个属性，text-align-last 属性规定如何对齐文本的最后一行，并且 text-align-last 属性只有在 text-align 属性设置为 justify 时才起作用。</p>
<p>尝试给容器添加 text-align-last:justify：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.justify&#123;</div><div class="line">  text-align: justify;</div><div class="line">  text-align-last: justify; // 新增这一行</div><div class="line">&#125;</div><div class="line"></div><div class="line">.justify i&#123;</div><div class="line">  width:24px;</div><div class="line">  line-height:24px;</div><div class="line">  display:inline-block;</div><div class="line">  text-align:center;</div><div class="line">  border-radius:50%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现终于可以了，实现了多列均匀布局：</p>
<p><img src="http://olrmgd9hk.bkt.clouddn.com/multi-column-equal-ok.png" alt="image"></p>
<p>结束了？没有，查看一下 text-align-last 的兼容性：</p>
<p><img src="http://olrmgd9hk.bkt.clouddn.com/multi-column-equal-browser.png" alt="image"></p>
<p>但是一看兼容性，惨不忍睹，只有 IE8+ 和 最新的 chrome 支持 text-align-last 属性，也就是说，如果你不是在使用 IE8+ 或者 最新版的 chrome 观看本文，上面 Demo 里的打开的 codePen 例子还是没有均匀分布。</p>
<p>上面说了要使用 text-align:justify 实现多列布局，要配合 text-align-last ，但是它的兼容性又不好，真的没办法了么，其实还是有的，使用伪元素配合，不需要 text-align-last 属性。</p>
<p>我们给 class=”justify” 的 div 添加一个伪元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">.justify&#123;</div><div class="line">  text-align: justify;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.justify i&#123;</div><div class="line">  width:24px;</div><div class="line">  line-height:24px;</div><div class="line">  display:inline-block;</div><div class="line">  text-align:center;</div><div class="line">  border-radius:50%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.justify:after &#123;</div><div class="line">  content: &quot;&quot;;</div><div class="line">  display: inline-block;</div><div class="line">  position: relative;</div><div class="line">  width: 100%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>去掉了 text-align-last: justify 了，增加一个伪元素，效果如下：</p>
<p><img src="http://olrmgd9hk.bkt.clouddn.com/multi-column-equal-ok.png" alt="image"></p>
<p>通过给伪元素 :after 设置 inline-block 设置宽度 100% ，配合容器的 text-align: justify 就可以轻松实现多列均匀布局了。再多配合几句 hack 代码，可以实现兼容到 IE6+ ，最重要的是代码不长，很好理解。</p>
<p>那么为什么使用了 :after 伪元素之后就可以实现对齐了呢？</p>
<p>原因在于 justify 只有在存在第二行的情况下，第一行才两端对齐，所以在这里，我们需要制造一个假的第二行，而 :after 伪元素正好再适合不过。</p>
<p>最终实现题目初始所示：</p>
<p><img src="http://olrmgd9hk.bkt.clouddn.com/multi-column-equal.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如图所示，如何实现下列这种多列均匀布局：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://olrmgd9hk.bkt.clouddn.com/multi-column-equal.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;法一：display-flex&quot;&gt;
    
    </summary>
    
    
      <category term="css技巧" scheme="https://webstermobile.github.io/blog/tags/css%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>移动端高清多屏适配的解决方案</title>
    <link href="https://webstermobile.github.io/blog/mobile-hd-multi-screen-adaptation-solution.html"/>
    <id>https://webstermobile.github.io/blog/mobile-hd-multi-screen-adaptation-solution.html</id>
    <published>2017-03-19T05:48:52.000Z</published>
    <updated>2017-03-19T07:07:01.153Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ul>
<li>开发移动端H5页面</li>
<li>面对不同分辨率的手机</li>
<li>面对不同屏幕尺寸的手机</li>
</ul>
<h4 id="视觉稿"><a href="#视觉稿" class="headerlink" title="视觉稿"></a>视觉稿</h4><p>在前端开发之前，视觉MM会给我们一个psd文件，称之为视觉稿。</p>
<p>对于移动端开发而言，为了做到页面高清的效果，视觉稿的规范往往会遵循以下两点：</p>
<ol>
<li><p>首先，选取一款手机的屏幕宽高作为基准(以前是iphone4的320×480，现在更多的是iphone6的375×667)</p>
</li>
<li><p>对于retina屏幕(如: dpr=2)，为了达到高清效果，视觉稿的画布大小会是基准的2倍，也就是说像素点个数是原来的4倍（对iphone6而言：原先的375×667，就会变成750×1334）</p>
</li>
</ol>
<p>问题：</p>
<ol>
<li><p>对于dpr=2的手机，为什么画布大小×2，就可以解决高清问题</p>
</li>
<li><p>对于2倍大小的视觉稿，在具体的css编码中如何还原每一个区块的真实宽高(也就是布局问题)?</p>
</li>
</ol>
<p>带着问题，往下看…</p>
<h4 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h4><p>在进行具体的分析之前，首先得知道下面这些关键性基本概念(术语)。</p>
<h4 id="物理像素-physical-pixel"><a href="#物理像素-physical-pixel" class="headerlink" title="物理像素(physical pixel)"></a>物理像素(physical pixel)</h4><p>一个物理像素是显示器(手机屏幕)上最小的物理显示单元，在操作系统的调度下，每一个设备像素都有自己的颜色值和亮度值。</p>
<h4 id="设备独立像素-density-independent-pixel"><a href="#设备独立像素-density-independent-pixel" class="headerlink" title="设备独立像素(density-independent pixel)"></a>设备独立像素(density-independent pixel)</h4><p>设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素(比如: css像素)，然后由相关系统转换为物理像素。</p>
<p>所以说，物理像素和设备独立像素之间存在着一定的对应关系，这就是接下来要说的设备像素比。</p>
<h4 id="设备像素比-device-pixel-ratio"><a href="#设备像素比-device-pixel-ratio" class="headerlink" title="设备像素比(device pixel ratio )"></a>设备像素比(device pixel ratio )</h4><p>设备像素比(简称dpr)定义了物理像素和设备独立像素的对应关系，它的值可以按如下的公式的得到：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">设备像素比 = 物理像素 / 设备独立像素 // 在某一方向上，x方向或者y方向</div></pre></td></tr></table></figure>
<p>在javascript中，可以通过window.devicePixelRatio获取到当前设备的dpr。</p>
<p>在css中，可以通过-webkit-device-pixel-ratio，-webkit-min-device-pixel-ratio和 -webkit-max-device-pixel-ratio进行媒体查询，对不同dpr的设备，做一些样式适配(这里只针对webkit内核的浏览器和webview)。</p>
<p>综合上面几个概念，一起举例说明下：</p>
<p>以iphone6为例：</p>
<ol>
<li><p>设备宽高为375×667，可以理解为设备独立像素(或css像素)</p>
</li>
<li><p>dpr为2，根据上面的计算公式，其物理像素就应该×2，为750×1334</p>
</li>
</ol>
<p>用一张图来表现，就是这样：<br><img src="http://olrmgd9hk.bkt.clouddn.com/gqpic1.jpg" alt="image"></p>
<p>上图中可以看出，对于这样的css样式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">width: 2px;</div><div class="line"></div><div class="line">height: 2px;</div></pre></td></tr></table></figure>
<p>在不同的屏幕上(普通屏幕 vs retina屏幕)，css像素所呈现的大小(物理尺寸)是一致的，不同的是1个css像素所对应的物理像素个数是不一致的。</p>
<ul>
<li><p>在普通屏幕下，1个css像素 对应 1个物理像素(1:1)。</p>
</li>
<li><p>在retina 屏幕下，1个css像素对应 4个物理像素(1:4)。</p>
</li>
</ul>
<h4 id="位图像素"><a href="#位图像素" class="headerlink" title="位图像素"></a>位图像素</h4><p>一个位图像素是栅格图像(如：png, jpg, gif等)最小的数据单元。每一个位图像素都包含着一些自身的显示信息(如：显示位置，颜色值，透明度等)。</p>
<p>谈到这里，就得说一下，retina下图片的展示情况？</p>
<p>理论上，1个位图像素对应于1个物理像素，图片才能得到完美清晰的展示。</p>
<p>在普通屏幕下是没有问题的，但是在retina屏幕下就会出现位图像素点不够，从而导致图片模糊的情况。</p>
<p>用一张图来表示：</p>
<p><img src="http://olrmgd9hk.bkt.clouddn.com/gqpic2.jpg" alt="image"></p>
<p>如上图：对于dpr=2的retina屏幕而言，1个位图像素对应于4个物理像素，由于单个位图像素不可以再进一步分割，所以只能就近取色，从而导致图片模糊(注意上述的几个颜色值)。</p>
<p>所以，对于图片高清问题，比较好的方案就是两倍图片(@2x)。</p>
<p>如：200×300(css pixel)img标签，就需要提供400×600的图片。</p>
<p>如此一来，位图像素点个数就是原来的4倍，在retina屏幕下，位图像素点个数就可以跟物理像素点个数形成 1 : 1的比例，图片自然就清晰了(这也解释了之前留下的一个问题，为啥视觉稿的画布大小要×2？)。</p>
<p>这里就还有另一个问题，如果普通屏幕下，也用了两倍图片，会怎样呢？</p>
<p>很明显，在普通屏幕下，200×300(css pixel)img标签，所对应的物理像素个数就是200×300个，而两倍图片的位图像素个数则是200×300*4，所以就出现一个物理像素点对应4个位图像素点，所以它的取色也只能通过一定的算法(显示结果就是一张只有原图像素总数四分之一，我们称这个过程叫做downsampling)，肉眼看上去虽然图片不会模糊，但是会觉得图片缺少一些锐利度，或者是有点色差(但还是可以接受的)。</p>
<p>用一张图片来表示：</p>
<p><img src="http://olrmgd9hk.bkt.clouddn.com/gqpic3.jpg" alt="image"></p>
<p>针对上面的两个问题，我做了一个demo</p>
<p><img src="http://olrmgd9hk.bkt.clouddn.com/gqpic4.jpg" alt="image"></p>
<p>demo中，100×100的图片，分别放在100×100，50×50，25×25的img容器中，在retina屏幕下的显示效果。</p>
<p>条形图，通过放大镜其实可以看出边界像素点取值的不同：</p>
<p>图1，就近取色，色值介于红白之间，偏淡，图片看上去会模糊(可以理解为图片拉伸)</p>
<p>图2，没有就近取色，色值要么是红，要么是白，图片看上去很清晰</p>
<p>图3，就近取色，色值介于红白之间，偏重，图片看上去有色差，缺少锐利度(可以理解为图片挤压)<br>    爱字图，可以通过看文字”爱”来区分图片模糊还是清晰。</p>
<h4 id="几个问题"><a href="#几个问题" class="headerlink" title="几个问题"></a>几个问题</h4><p>这里说一下，移动端H5开发，在不同分辨率，不同屏幕手机下会遇到的几个经典问题。</p>
<h4 id="retina下，图片高清问题"><a href="#retina下，图片高清问题" class="headerlink" title="retina下，图片高清问题"></a>retina下，图片高清问题</h4><p>这个问题上面已经介绍过解决方案了：两倍图片(@2x)，然后图片容器缩小50%。</p>
<p>如：图片大小，400×600;</p>
<p>1.img标签</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">width: 200px;</div><div class="line"></div><div class="line">height: 300px;</div></pre></td></tr></table></figure>
<p>2.背景图片</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">width: 200px;</div><div class="line"></div><div class="line">height: 300px;</div><div class="line"></div><div class="line">background-image: url(image@2x.jpg);</div><div class="line"></div><div class="line">background-size: 200px 300px; // 或者: background-size: contain;</div></pre></td></tr></table></figure>
<p>这样的缺点，很明显，普通屏幕下：</p>
<ol>
<li><p>同样下载了@2x的图片，造成资源浪费。</p>
</li>
<li><p>图片由于downsampling，会失去了一些锐利度(或是色差)。</p>
</li>
</ol>
<p>所以最好的解决办法是：不同的dpr下，加载不同的尺寸的图片。</p>
<p>不管是通过css媒体查询，还是通过javascript条件判断都是可以的。</p>
<p>那么问题来了，这样的话，不就是要准备两套图片了嘛？(@1x 和@2x)</p>
<p>我想，做的好的公司，都会有这么一个图片服务器，通过url获取参数，然后可以控制图片质量，也可以将图片裁剪成不同的尺寸。</p>
<p>所以我们只需上传大图(@2x)，其余小图都交给图片服务器处理，我们只要负责拼接url即可。</p>
<p>如，这样一张原图：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://img.alicdn.com/tps/TB1AGMmIpXXXXafXpXXXXXXXXXX.jpg // 原图</div></pre></td></tr></table></figure>
<p>可以类似这样，进行图片裁剪：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 200×200</div><div class="line"></div><div class="line">https://img.alicdn.com/tps/TB1AGMmIpXXXXafXpXXXXXXXXXX.jpg_200x200.jpg</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 100×100</div><div class="line"></div><div class="line">https://img.alicdn.com/tps/TB1AGMmIpXXXXafXpXXXXXXXXXX.jpg_100x100.jpg</div></pre></td></tr></table></figure>
<p>(ps: 当然裁剪只是对原图的等比裁剪，得保证图片的清晰嘛~)</p>
<h4 id="retina下，border-1px问题"><a href="#retina下，border-1px问题" class="headerlink" title="retina下，border: 1px问题"></a>retina下，border: 1px问题</h4><p>这大概是设计师最敏感，最关心的问题了。</p>
<p>首先得说一下，为什么存在retina下，border: 1px这一说？</p>
<p>我们正常的写css，像这样border: 1px;，在retina屏幕下，会有什么问题吗？</p>
<p>先来，来看看下面的图：</p>
<p><img src="http://olrmgd9hk.bkt.clouddn.com/gqpic6.jpg" alt="image"></p>
<p>上面两张图分别是在iphone3gs(dpr=1)和iphone5(dpr=2)下面的测试效果，对比来看，对于1px的border的展示，它们是一致的，并无区别。</p>
<p>那么retina显示屏的优势在哪里，设计师为何觉得高清屏下(右图)这个线条粗呢？明明和左右一样的~</p>
<p>还是通过一张图来解释：</p>
<p><img src="http://olrmgd9hk.bkt.clouddn.com/gqpic7.jpg" alt="image"></p>
<p>上图中，对于一条1px宽的直线，它们在屏幕上的物理尺寸(灰色区域)的确是相同的，不同的其实是屏幕上最小的物理显示单元，即物理像素，所以对于一条直线，iphone5它能显示的最小宽度其实是图中的红线圈出来的灰色区域，用css来表示，理论上说是0.5px。</p>
<p>所以，设计师想要的retina下border: 1px;，其实就是1物理像素宽，对于css而言，可以认为是border: 0.5px;，这是retina下(dpr=2)下能显示的最小单位。</p>
<p>然而，无奈并不是所有手机浏览器都能识别border: 0.5px;，ios7以下，android等其他系统里，0.5px会被当成为0px处理，那么如何实现这0.5px呢？</p>
<p>最简单的一个做法就是这样(元素scale)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">.scale&#123;</div><div class="line"></div><div class="line">    position: relative;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">.scale:after&#123;</div><div class="line"></div><div class="line">    content:&quot;&quot;;</div><div class="line"></div><div class="line">    position: absolute;</div><div class="line"></div><div class="line">    bottom:0px;</div><div class="line"></div><div class="line">    left:0px;</div><div class="line"></div><div class="line">    right:0px;</div><div class="line"></div><div class="line">    border-bottom:1px solid #ddd;</div><div class="line"></div><div class="line">    -webkit-transform:scaleY(.5);</div><div class="line"></div><div class="line">    -webkit-transform-origin:0 0;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们照常写border-bottom: 1px solid #ddd;，然后通过transform: scaleY(.5)缩小0.5倍来达到0.5px的效果，但是这样hack实在是不够通用(如：圆角等)，写起来也麻烦。</p>
<p>当然还有其他好多hack方法，网上都可以搜索到，但是各有利弊，这里比较推荐的还是页面scale的方案，是比较通用的，几乎满足所有场景。</p>
<p>对于iphone5(dpr=2)，添加如下的meta标签，设置viewport(scale 0.5)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=640,initial-scale=0.5,maximum-scale=0.5, minimum-scale=0.5,user-scalable=no&quot;&gt;</div></pre></td></tr></table></figure>
<p>这样，页面中的所有的border: 1px都将缩小0.5，从而达到border: 0.5px;的效果。</p>
<p>有人担心页面scale后会影响性能，@妙净同学做过性能测试。</p>
<p>看一下实现后的效果图对比(右图为优化过的)：</p>
<p><img src="http://olrmgd9hk.bkt.clouddn.com/gqpic8.jpg" alt="image"></p>
<p>然而，页面scale，必然会带来一些问题：</p>
<ol>
<li><p>字体大小会被缩放</p>
</li>
<li><p>页面布局会被缩放(如: div的宽高等)</p>
</li>
</ol>
<p>这两个问题后面讲到…</p>
<h4 id="多屏适配布局问题"><a href="#多屏适配布局问题" class="headerlink" title="多屏适配布局问题"></a>多屏适配布局问题</h4><p>移动端布局，为了适配各种大屏手机，目前最好用的方案莫过于使用相对单位rem。</p>
<p>基于rem的原理，我们要做的就是: 针对不同手机屏幕尺寸和dpr动态的改变根节点html的font-size大小(基准值)。</p>
<p>这里我们提取了一个公式(rem表示基准值)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rem = document.documentElement.clientWidth * dpr / 10</div></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li><p>乘以dpr，是因为页面有可能为了实现1px border页面会缩放(scale) 1/dpr 倍(如果没有，dpr=1),。</p>
</li>
<li><p>除以10，是为了取整，方便计算(理论上可以是任何值)<br> 所以就像下面这样，html的font-size可能会：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">iphone3gs: 320px / 10 = 32px</div><div class="line"></div><div class="line">iphone4/5: 320px * 2 / 10 = 64px</div><div class="line"></div><div class="line">iphone6: 375px * 2 / 10 = 75px</div></pre></td></tr></table></figure>
<p>对于动态改变根节点html的font-size，我们可以通过css做，也可以通过javascript做。</p>
<p>css方式，可以通过设备宽度来媒体查询来改变html的font-size：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">html&#123;font-size: 32px;&#125;</div><div class="line"></div><div class="line">//iphone 6 </div><div class="line"></div><div class="line">@media (min-device-width : 375px) &#123;</div><div class="line"></div><div class="line">   html&#123;font-size: 64px;&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// iphone6 plus </div><div class="line"></div><div class="line">@media (min-device-width : 414px) &#123;</div><div class="line"></div><div class="line">    html&#123;font-size: 75px;&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>缺点：通过设备宽度范围区间这样的媒体查询来动态改变rem基准值，其实不够精确，比如：宽度为360px 和 宽度为320px的手机，因为屏宽在同一范围区间内(&lt;375px)，所以会被同等对待(rem基准值相同)，而事实上他们的屏幕宽度并不相等，它们的布局也应该有所不同。最终，结论就是：这样的做法，没有做到足够的精确，但是够用。</p>
<p>javascript方式，通过上面的公式，计算出基准值rem，然后写入样式，大概如下(代码参考自kimi的m-base模块)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">var dpr, rem, scale;</div><div class="line"></div><div class="line">var docEl = document.documentElement;</div><div class="line"></div><div class="line">var fontEl = document.createElement(&apos;style&apos;);</div><div class="line"></div><div class="line">var metaEl = document.querySelector(&apos;meta[name=&quot;viewport&quot;]&apos;);</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">dpr = window.devicePixelRatio || 1;</div><div class="line"></div><div class="line">rem = docEl.clientWidth * dpr / 10;</div><div class="line"></div><div class="line">scale = 1 / dpr;</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">// 设置viewport，进行缩放，达到高清效果</div><div class="line"></div><div class="line">metaEl.setAttribute(&apos;content&apos;, &apos;width=&apos; + dpr * docEl.clientWidth + &apos;,initial-scale=&apos; + scale + &apos;,maximum-scale=&apos; + scale + &apos;, minimum-scale=&apos; + scale + &apos;,user-scalable=no&apos;);</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">// 设置data-dpr属性，留作的css hack之用</div><div class="line"></div><div class="line">docEl.setAttribute(&apos;data-dpr&apos;, dpr);</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">// 动态写入样式</div><div class="line"></div><div class="line">docEl.firstElementChild.appendChild(fontEl);</div><div class="line"></div><div class="line">fontEl.innerHTML = &apos;html&#123;font-size:&apos; + rem + &apos;px!important;&#125;&apos;;</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">// 给js调用的，某一dpr下rem和px之间的转换函数</div><div class="line"></div><div class="line">window.rem2px = function(v) &#123;</div><div class="line"></div><div class="line">v = parseFloat(v);</div><div class="line"></div><div class="line">return v * rem;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">window.px2rem = function(v) &#123;</div><div class="line"></div><div class="line">    v = parseFloat(v);</div><div class="line"></div><div class="line">    return v / rem;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">window.dpr = dpr;</div><div class="line"></div><div class="line">window.rem = rem;</div></pre></td></tr></table></figure>
<p>这种方式，可以精确地算出不同屏幕所应有的rem基准值，缺点就是要加载这么一段js代码，但个人觉得是这是目前最好的方案了。</p>
<p>因为这个方案同时解决了三个问题：</p>
<ol>
<li><p>border: 1px问题</p>
</li>
<li><p>图片高清问题</p>
</li>
<li><p>屏幕适配布局问题</p>
</li>
</ol>
<p>说到布局，自然就得回答一下最初的留下的那个问题：如何在css编码中还原视觉稿的真实宽高？</p>
<p>前提条件：</p>
<ol>
<li><p>拿到的是一个针对iphone6的高清视觉稿 750×1334</p>
</li>
<li><p>采用上述的高清方案(js代码)</p>
</li>
</ol>
<p>如果有一个区块，在psd文件中量出：宽高750×300px的div，那么如何转换成rem单位呢？</p>
<p>公式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rem = px / 基准值;</div></pre></td></tr></table></figure>
<p>对于一个iphone6的视觉稿，它的基准值就是75(之前有提到);</p>
<p>所以，在确定了视觉稿(即确定了基准值)后，通常我们会用less写一个mixin，像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 例如: .px2rem(height, 80);</div><div class="line"></div><div class="line">.px2rem(@name, @px)&#123;</div><div class="line"></div><div class="line">    @&#123;name&#125;: @px / 75 * 1rem;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以，对于宽高750×300px的div，我们用less就这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.px2rem(width, 750);</div><div class="line"></div><div class="line">.px2rem(height, 300);</div></pre></td></tr></table></figure>
<p>转换成html，就是这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">width: 10rem; // -&gt; 750px</div><div class="line"></div><div class="line">height: 4rem; // -&gt; 300px</div></pre></td></tr></table></figure>
<p>最后因为dpr为2，页面scale了0.5，所以在手机屏幕上显示的真实宽高应该是375×150px，就刚刚好。</p>
<p>倘若页面并没有scale 0.5，我们的代码就得这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.px2rem(width, 375);</div><div class="line"></div><div class="line">.px2rem(height, 150);</div></pre></td></tr></table></figure>
<p>这样的宽高，我们往往是这样得来的：</p>
<ol>
<li><p>将750×1334的视觉稿转成375×667的大小后，再去量这个区块的大小(感觉好傻)。</p>
</li>
<li><p>在750×1334量得区块宽高是750×300px后，再口算除以2(感觉好麻烦)。</p>
</li>
</ol>
<p>最后给出一张没有布局适配(上图)和用rem布局适配(下图)的对比图：</p>
<p><img src="http://olrmgd9hk.bkt.clouddn.com/gqpic10.jpg" alt="image"></p>
<p>(上面的手机分别是：iphone3gs, iphone5, iphone6)</p>
<p>很明显可以看出，rem适配的各个区块的宽高都会随着手机屏宽而改变，最最明显的可以看一下图片列表那部分，最后一张图视觉稿要求只出现一点点，rem布局在任何屏幕下都显示的很好。</p>
<h4 id="字体大小问题"><a href="#字体大小问题" class="headerlink" title="字体大小问题"></a>字体大小问题</h4><p>既然上面的方案会使得页面缩放(scale)，对于页面区块的宽高，我们可以依赖高清视觉稿，因为视觉稿本来就×2了，我们直接量就可以了，那么对于字体该如何处理呢？</p>
<p>对于字体缩放问题，设计师原本的要求是这样的：任何手机屏幕上字体大小都要统一，所以我们针对不同的分辨率(dpr不同)，会做如下处理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">font-size: 16px;</div><div class="line"></div><div class="line">[data-dpr=&quot;2&quot;] input &#123;</div><div class="line"></div><div class="line">  font-size: 32px;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>(注意，字体不可以用rem，误差太大了，且不能满足任何屏幕下字体大小相同)</p>
<p>为了方便，我们也会用less写一个mixin：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">.px2px(@name, @px)&#123;</div><div class="line"></div><div class="line">    @&#123;name&#125;: round(@px / 2) * 1px;</div><div class="line"></div><div class="line">    [data-dpr=&quot;2&quot;] &amp; &#123;</div><div class="line"></div><div class="line">        @&#123;name&#125;: @px * 1px;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // for mx3</div><div class="line"></div><div class="line">    [data-dpr=&quot;2.5&quot;] &amp; &#123;</div><div class="line"></div><div class="line">        @&#123;name&#125;: round(@px * 2.5 / 2) * 1px;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // for 小米note</div><div class="line"></div><div class="line">    [data-dpr=&quot;2.75&quot;] &amp; &#123;</div><div class="line"></div><div class="line">        @&#123;name&#125;: round(@px * 2.75 / 2) * 1px;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [data-dpr=&quot;3&quot;] &amp; &#123;</div><div class="line"></div><div class="line">        @&#123;name&#125;: round(@px / 2 * 3) * 1px</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // for 三星note4</div><div class="line"></div><div class="line">    [data-dpr=&quot;4&quot;] &amp; &#123;</div><div class="line"></div><div class="line">        @&#123;name&#125;: @px * 2px;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>(注意：html的data-dpr属性就是之前js方案里面有提到的，这里就有用处了)</p>
<p>根据经验和测试，还是会出现这些奇奇葩葩的dpr，这里做了统一兼容~</p>
<p>用的时候，就像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.px2px(font-size, 32);</div></pre></td></tr></table></figure>
<p>当然对于其他css属性，如果也要求不同dpr下都保持一致的话，也可以这样操作，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.px2px(padding, 20);</div><div class="line"></div><div class="line">.px2px(right, 8);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;开发移动端H5页面&lt;/li&gt;
&lt;li&gt;面对不同分辨率的手机&lt;/li&gt;
&lt;li&gt;面对不同屏幕尺寸的手机&lt;/li&gt;
&lt;/ul&gt;
&lt;h
    
    </summary>
    
    
      <category term="H5" scheme="https://webstermobile.github.io/blog/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>Woo commerce—搭建WordPress电子商务网站</title>
    <link href="https://webstermobile.github.io/blog/woo-commerce-introduction.html"/>
    <id>https://webstermobile.github.io/blog/woo-commerce-introduction.html</id>
    <published>2017-03-18T14:02:52.000Z</published>
    <updated>2017-03-19T06:17:12.373Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>用WordPress构建电子商务网站已经是一个流行的解决方案，与oscommerce、prestashop相比，WordPress更适合构建小型电商网站，显然WordPress对资源的消耗使其难以胜任大型电子商务网站，但博客式营销的模式以及WordPress的CMS特性也让它有胜过大型电商网站的地方——搭建更容易、费用低、管理简单，非常适合那些卖的产品不多的人。今天介绍的是一款新兴的WordPress电商插件——Woo Commerce。</p>
</blockquote>
<h2 id="Woo-Commerce简介"><a href="#Woo-Commerce简介" class="headerlink" title="Woo Commerce简介"></a>Woo Commerce简介</h2><p><strong>Woo Commerce是一款开源的WordPress电子商务插件</strong>，可以再woo官网免费下载，且搭配了几款免费的支持woo commerce的主题，让用户无需付费就能体验到这款插件的强大。</p>
<p><a href="http://www.woothemes.com/woocommerce/" target="_blank" rel="external">Woo Commerce插件下载</a></p>
<p><a href="http://wcdocs.woothemes.com/" target="_blank" rel="external">Woo Commerce文档</a></p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>灵活，内置多种hooks和filters，主题和插件开发者可以轻松扩展功能</li>
<li>后台选项卡式设置，界面友好，清晰易懂</li>
<li>支持多种付款方式，包括</li>
<li><ul>
<li>Authorize.net</li>
</ul>
</li>
<li><ul>
<li>Inspire Commerce</li>
</ul>
</li>
<li><ul>
<li>2Checkout.com</li>
</ul>
</li>
<li><ul>
<li>Google Checkout</li>
</ul>
</li>
<li><ul>
<li>PayPal Pro<br>可以用插件形式扩展更多的付款方式，有详细的文档描述</li>
</ul>
</li>
<li>强大的模板系统，可以通过拷贝woocommerce模板到自己的主题目录下，轻松覆盖默认模板，定制化很方便。</li>
<li>最后一点，文档非常详细，这是一个big bonus。说明这款插件已经很好的考虑了开发者、设计者的需求。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;用WordPress构建电子商务网站已经是一个流行的解决方案，与oscommerce、prestashop相比，WordPress更适合构建小型电商网站，显然WordPress对资源的消耗使其难以胜任大型电子商务网站，但博客式营销的模式以及Word
    
    </summary>
    
    
      <category term="wordpress" scheme="https://webstermobile.github.io/blog/tags/wordpress/"/>
    
      <category term="Woo commerce" scheme="https://webstermobile.github.io/blog/tags/Woo-commerce/"/>
    
  </entry>
  
  <entry>
    <title>wordpress防刷新无插件统计文章浏览次数</title>
    <link href="https://webstermobile.github.io/blog/wp-views-no-plugin.html"/>
    <id>https://webstermobile.github.io/blog/wp-views-no-plugin.html</id>
    <published>2017-03-17T16:55:34.000Z</published>
    <updated>2017-03-17T16:59:07.140Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前做的一个网站有个文章浏览次数统计的功能，以往都是用wp-postviews插件来实现（懒人，你懂得O(∩_∩)O哈哈~），后来经过多次使用，发现用这个插件有点小题大做，我只是想输出个浏览次数，该插件的其他功能我都不需要，那是不是用这个插件就显得比较赘余了呢？其实之前用到的许多插件也都只是用了他九牛之一毛的功力，插件多了就拖慢了站点打开的速度了，随着客户对站点打开的速度越来越高，还是要学会自己做功能啊，尽量做到代码洁净！于是乎有了下文：</p>
</blockquote>
<p>第一步，在你主题的functions.php文件中添加如下代码(是统计计数、获取浏览数的一些函数)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">/***********文章统计*********/  </div><div class="line">    function process_postviews() &#123;   </div><div class="line">        global $user_ID, $post;   </div><div class="line">        if(check_cookie($post))   </div><div class="line">            return;   </div><div class="line">        if(is_int($post)) &#123;   </div><div class="line">            $post = get_post($post);   </div><div class="line">        &#125;   </div><div class="line">        if(!wp_is_post_revision($post)) &#123;   </div><div class="line">            if(is_single() || is_page()) &#123;   </div><div class="line">                $id = intval($post-&gt;ID);   </div><div class="line">                //$post_views = get_post_custom($id);   </div><div class="line">                $post_views = get_post_meta($id,&apos;_check_count&apos;,true);   </div><div class="line">                //统计所有人   </div><div class="line">                $should_count = true;   </div><div class="line">                //排除机器人   </div><div class="line">                $bots = array(&apos;Google Bot&apos; =&gt; &apos;googlebot&apos;, &apos;Google Bot&apos; =&gt; &apos;google&apos;, &apos;MSN&apos; =&gt; &apos;msnbot&apos;, &apos;Alex&apos; =&gt; &apos;ia_archiver&apos;, &apos;Lycos&apos; =&gt; &apos;lycos&apos;, &apos;Ask Jeeves&apos; =&gt; &apos;jeeves&apos;, &apos;Altavista&apos; =&gt; &apos;scooter&apos;, &apos;AllTheWeb&apos; =&gt; &apos;fast-webcrawler&apos;, &apos;Inktomi&apos; =&gt; &apos;slurp@inktomi&apos;, &apos;Turnitin.com&apos; =&gt; &apos;turnitinbot&apos;, &apos;Technorati&apos; =&gt; &apos;technorati&apos;, &apos;Yahoo&apos; =&gt; &apos;yahoo&apos;, &apos;Findexa&apos; =&gt; &apos;findexa&apos;, &apos;NextLinks&apos; =&gt; &apos;findlinks&apos;, &apos;Gais&apos; =&gt; &apos;gaisbo&apos;, &apos;WiseNut&apos; =&gt; &apos;zyborg&apos;, &apos;WhoisSource&apos; =&gt; &apos;surveybot&apos;, &apos;Bloglines&apos; =&gt; &apos;bloglines&apos;, &apos;BlogSearch&apos; =&gt; &apos;blogsearch&apos;, &apos;PubSub&apos; =&gt; &apos;pubsub&apos;, &apos;Syndic8&apos; =&gt; &apos;syndic8&apos;, &apos;RadioUserland&apos; =&gt; &apos;userland&apos;, &apos;Gigabot&apos; =&gt; &apos;gigabot&apos;, &apos;Become.com&apos; =&gt; &apos;become.com&apos;,&apos;Baidu Bot&apos;=&gt;&apos;Baiduspider&apos;);   </div><div class="line">                $useragent = $_SERVER[&apos;HTTP_USER_AGENT&apos;];   </div><div class="line">                foreach ($bots as $name =&gt; $lookfor) &#123;   </div><div class="line">                    if (stristr($useragent, $lookfor) !== false) &#123;   </div><div class="line">                        $should_count = false;   </div><div class="line">                        break;   </div><div class="line">                    &#125;   </div><div class="line">                &#125;   </div><div class="line">                if($should_count) &#123;   </div><div class="line">                    if(!update_post_meta($id, &apos;_check_count&apos;, ($post_views+1))) &#123;   </div><div class="line">                        add_post_meta($id, &apos;_check_count&apos;, 1, true);   </div><div class="line">                    &#125;   </div><div class="line">                &#125;   </div><div class="line">            &#125;   </div><div class="line">        &#125;   </div><div class="line">    &#125;   </div><div class="line">      </div><div class="line">    function check_cookie($post)&#123;   </div><div class="line">        $COOKNAME = &apos;websterwp_view&apos;;   </div><div class="line">        if(isset($_COOKIE[$COOKNAME]))   </div><div class="line">            $cookie = $_COOKIE[$COOKNAME];   </div><div class="line">        else  </div><div class="line">            return false;   </div><div class="line">        $id = $post-&gt;ID;   </div><div class="line">        if(empty($id))&#123;   </div><div class="line">            return false;   </div><div class="line">        &#125;   </div><div class="line">        if(!empty($cookie))&#123;   </div><div class="line">            $list = explode(&apos;a&apos;, $cookie);   </div><div class="line">            if(!empty($list) &amp;&amp; in_array($id, $list))&#123;   </div><div class="line">                return true;   </div><div class="line">            &#125;   </div><div class="line">        &#125;   </div><div class="line">        return false;   </div><div class="line">    &#125;   </div><div class="line">    ### Function: Display The Post Views   </div><div class="line">    function the_views($display = true,$id) &#123;   </div><div class="line">        $post_views = intval(get_post_meta($id,&apos;_check_count&apos;,true));   </div><div class="line">        $output = number_format_i18n($post_views);   </div><div class="line">        if($display) &#123;   </div><div class="line">            echo $output;   </div><div class="line">        &#125; else &#123;   </div><div class="line">            return $output;   </div><div class="line">        &#125;   </div><div class="line">    &#125;   </div><div class="line">      </div><div class="line">    ### Function: Display Total Views   </div><div class="line">    if(!function_exists(&apos;get_totalviews&apos;)) &#123;   </div><div class="line">        function get_totalviews($display = true) &#123;   </div><div class="line">            global $wpdb;   </div><div class="line">            $total_views = intval($wpdb-&gt;get_var(&quot;SELECT SUM(meta_value+0) FROM $wpdb-&gt;postmeta WHERE meta_key = &apos;_check_count&apos;&quot;));   </div><div class="line">            if($display) &#123;   </div><div class="line">                echo number_format_i18n($total_views);   </div><div class="line">            &#125; else &#123;   </div><div class="line">                return $total_views;   </div><div class="line">            &#125;   </div><div class="line">        &#125;   </div><div class="line">    &#125;   </div><div class="line">      </div><div class="line">    ### Function: Add Views Custom Fields   </div><div class="line">    add_action(&apos;publish_post&apos;, &apos;add_views_fields&apos;);   </div><div class="line">    add_action(&apos;publish_page&apos;, &apos;add_views_fields&apos;);   </div><div class="line">    function add_views_fields($post_ID) &#123;   </div><div class="line">        global $wpdb;   </div><div class="line">        if(!wp_is_post_revision($post_ID)) &#123;   </div><div class="line">            add_post_meta($post_ID, &apos;_check_count&apos;, 0, true);   </div><div class="line">        &#125;   </div><div class="line">    &#125;   </div><div class="line">    ### Function: Delete Views Custom Fields   </div><div class="line">    add_action(&apos;delete_post&apos;, &apos;delete_views_fields&apos;);   </div><div class="line">    function delete_views_fields($post_ID) &#123;   </div><div class="line">        global $wpdb;   </div><div class="line">        if(!wp_is_post_revision($post_ID)) &#123;   </div><div class="line">            delete_post_meta($post_ID, &apos;_check_count&apos;);   </div><div class="line">        &#125;   </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>第二步：由于我们统计一般只统计文章，所以在你的主题的single.php文件的最最最最开头加上如下php代码。下面的代码是用来设置cookie的，会在用户浏览器端增加一个形如： 123a45a45a113 其中字母a是分隔文章ID的，有效期是一天，设置cookie前不能有任何输出，所以这些代码要添加在文件的最最开头。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$COOKNAME = &apos;websterwp_view&apos;; //cookie名称   </div><div class="line">    $TIME = 3600 * 24;   </div><div class="line">    $PATH = &apos;/&apos;;   </div><div class="line">        </div><div class="line">    $id = $posts[0]-&gt;ID;   </div><div class="line">    $expire = time() + $TIME; //cookie有效期   </div><div class="line">    if(isset($_COOKIE[$COOKNAME]))   </div><div class="line">        $cookie = $_COOKIE[$COOKNAME]; //获取cookie   </div><div class="line">    else  </div><div class="line">        $cookie = &apos;&apos;;   </div><div class="line">           </div><div class="line">    if(empty($cookie))&#123;   </div><div class="line">        //如果没有cookie   </div><div class="line">        setcookie($COOKNAME, $id, $expire, $PATH);   </div><div class="line">    &#125;else&#123;   </div><div class="line">        //用a分割成数组   </div><div class="line">        $list = explode(&apos;a&apos;, $cookie);   </div><div class="line">        //如果已经存在本文的id   </div><div class="line">        if(!in_array($id, $list))&#123;   </div><div class="line">            setcookie($COOKNAME, $cookie.&apos;a&apos;.$id, $expire, $PATH);   </div><div class="line">        &#125;   </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>第三步：在single.php文件的 while( have_posts() ) : the_post();的后面增加统计浏览数的函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">process_postviews();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前做的一个网站有个文章浏览次数统计的功能，以往都是用wp-postviews插件来实现（懒人，你懂得O(∩_∩)O哈哈~），后来经过多次使用，发现用这个插件有点小题大做，我只是想输出个浏览次数，该插件的其他功能我都不需要，那是不是用这个插件就显得
    
    </summary>
    
    
      <category term="wordpress" scheme="https://webstermobile.github.io/blog/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>git证书校验位置出错</title>
    <link href="https://webstermobile.github.io/blog/git-certificate-location-errow.html"/>
    <id>https://webstermobile.github.io/blog/git-certificate-location-errow.html</id>
    <published>2017-03-16T13:55:14.000Z</published>
    <updated>2017-03-19T06:10:53.823Z</updated>
    
    <content type="html"><![CDATA[<p>今天使用<strong>GIT</strong>的时候遇到一个问题（很奇怪，之前咋没出现这个问题呢）</p>
<h4 id="出错代码"><a href="#出错代码" class="headerlink" title="出错代码"></a>出错代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">error setting certificate verify locations:</div><div class="line">CAfile: F:/gitt/Git/mingw64/ssl/certs/ca-bundle.crt</div><div class="line">CApath: none</div></pre></td></tr></table></figure>
<p> 看到这么多字母，小编表示一脸懵逼，还好有度娘，搜索结果第一页就顺利找到答案，下面把解决方法写下来载入史册（O(∩_∩)O哈哈~）</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --system http.sslcainfo <span class="string">"D:\git\Git\mingw64\ssl\certs\ca-bundle.crt</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天使用&lt;strong&gt;GIT&lt;/strong&gt;的时候遇到一个问题（很奇怪，之前咋没出现这个问题呢）&lt;/p&gt;
&lt;h4 id=&quot;出错代码&quot;&gt;&lt;a href=&quot;#出错代码&quot; class=&quot;headerlink&quot; title=&quot;出错代码&quot;&gt;&lt;/a&gt;出错代码&lt;/h4&gt;&lt;figure
    
    </summary>
    
    
      <category term="git" scheme="https://webstermobile.github.io/blog/tags/git/"/>
    
  </entry>
  
</feed>
